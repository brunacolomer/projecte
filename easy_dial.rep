/*L'estructura de dades escollida es una variant d'un TST. Consisteix en un arbre ternari de cerca
però que en comptes de guardar tots els símbols de cada clau només en guardem un, d'aquesta manera
l'arbre només té tants nodes com telèfons que volem guardar. Funciona de la següent manera:
Si volem guardar JAUME, JOANNA, JOAN, ALEIX, ZOE, ZOELIA (ordenats de major a menor frequència)

                    J
                  / | \
                 A  O  Z 
                    |  |
                    A  O

On J és l'arrel i conté la informació de Jaume, el seu fill esquerra conté A: Aleix
El seu fill dret conté Z: Zoe i el seu fill central conté O: JOANNA, i el fill central
de O conté A: Joan. I finalment el fill central de Z es O: Zoelia.
La tria d'aquesta estructura de dades és per tal de simplificar els mètodes inici,
següent i anterior. Ja que si fas inici et retorna l'arrel(Jaume, el telèfon amb major freq.), 
si després fas seguent(Z) et retorna el fill esquerra que coincideix amb aquesta lletra: ZOE.
i si en comptes de ZOE el telefon que estas buscant és Zoelia escriuràs la O que coincidirà
amb el fill central de Zoe i et retornarà aquest telèfon. 

Posteriorment ens hem adonat que hauria sigut més senzill que a l'arrel no haguéssim guardat
la primera lletra per poder facilitar encara més la funció de següent, ja que llavors en aquest exemple
la J estaria a la posició de la O i correspondria a la lletra que s'ha d'escriure per obtenir Joan.*/

struct node {
    char _c;
    phone _telf;
    node* _esq; // Fill esquerra, apunta a símbols mateixa posició(lexicograficament inferiors)
    node* _cen; // Fill central, apunta a símbols següent posició
    node* _dre; // Fill dret, apunta a símbols mateixa posició(lexicograficament majors)
    node* _pare; // Apunta a pare o a l'anterior del node.
    node(const char &c, const phone &telf, node* esq = nullptr, node* cen = nullptr, node* dre = nullptr);
};

node* _arrel;
node* _actual;
string _pref;
nat _nivell;
node* _ant;
bool _p; // Boolea que indica si el prefix es indefinit o no
double freqtotal;

// Pre: n apunta a nullptr o a un subarbre del parametre implicit
// k es el nom
// Post: retorna un node que apunta a un subarbre del p.i. que conte n

node* insereix(node *n, nat i, const string &k, phone tel, node * pare);

// Pre: n apunta a nullptr o a un subarbre del parametre implicit
// Post: retorna el subarbre que te d'arrel un node amb _c==c
node* cerca(node *n, char c) const;

// Pre: 
// Post:
node* copia_nodes(node* m);

// Pre: m apunta a nullpyr o a un subarbre del paramatre implicit
// Post: Esborra tots els nodes del subarbre m
void esborra_nodes(node* m);

// Pre:
// Post:
node* cercador(node *n, char c);

// Pre:
// Post:
void inordre(node* n, vector<string>& result) const;

// Pre: n apunta a nullptr o a un subarbre del parametre implicit
// Post:
void calcula_mitjana(double& result, node* n, nat i, bool central) const;

// Pre: cert
// Post: retorna cert si pref es prefix de nom, fals altrament
bool comenca(string pref, const string nom) const;
