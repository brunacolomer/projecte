/* Representacio d'un conjunt de telefons amb una taula de dispersió 
ja que el cost d'inserir, consultar i suprimir es de mitjana constant
i per tant presenta una major eficiencia respecte un BST(de mitjana 
cost logarítmic i com a cas pitjor cost lineal) i que un 
AVL (mitjana i cas pitjor cost logaritmic)*/ 

struct node_hash{
    phone _p; //el p.num es el que s'utilitza per clasificar els nodes.
    node_hash *_seg;
    node_hash() : _p(phone()), _seg(NULL) {}
    node_hash(const phone p, node_hash *seg = NULL): _p(p), _seg(seg){}
};

node_hash **_taula;
nat _M;
nat _quants;

// Pre:
// Post:
static long const MULT = 31415926;
static long h(int k);

// Pre: cert
// Post: s'ha ajustat la mida de la taula adient segons el factor de carrega
// i s'han tornat a guardar els telefons en correspondència a la nova mida
void redispersio(float fc);

// Pre: cert
// Post: un float que representa el factor de carrega del parametre implicit
float factor_de_carrega() const;

// Pre: cert
// Post: s'ha afegit el telefon p al parametre implicit
void afegeix_numero(phone p);

// Pre: cert, mida = mida de la taula t
// Post: s'ha esborrat la taula de node_hash t de mida = mida
void esborra_taula(node_hash **t, nat mida);